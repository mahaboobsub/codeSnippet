`client/eslint.config.js`

```javascript
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

```

`client/index.html`

```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

```

`client/src/App.css`

```css
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

```

`client/src/App.jsx`

```javascript
import CreateSnippet from './components/CreateSnippet'
import Navbar from './components/Navbar'

function App() {
  

  return (
    <main className='container max-w-4xl mx-auto p-4'>
      <Navbar />
      <CreateSnippet/>
    </main>
  )
}

export default App

```

`client/src/components/CreateComment.jsx`

```javascript
// client/src/components/CreateComment.jsx

// FIX: Remove unused 'useEffect' and simplify imports
import React, { useState } from 'react';
import axios from 'axios';

// The component now receives the full snippet object and a function to refresh the main list
const CreateComment = ({ snippet, onCommentCreated }) => {
    const [text, setText] = useState('');

    // This function remains the same, it correctly posts to the comments service
    const addComment = async (e) => {
        e.preventDefault();
        if (!text.trim()) return;

        try {
            await axios.post(
                `http://localhost:8001/api/v1/snippet/${snippet.id}/comment`,
                { text }
            );
            
            setText('');
            
            // FIX: Call the passed-in function to trigger a data refresh in the parent
            onCommentCreated();

        } catch (error) {
            console.error("Failed to add comment:", error);
            alert("Failed to add comment. See console for details.");
        }
    };

    return (
        <div className='text-left'>
            <h4 className='font-semibold text-sm mt-3'>Comments:</h4>
            <ul className='list-disc list-inside text-sm pl-2'>
                {/* FIX: Render the comments array directly from the snippet prop */}
                {snippet.comments && snippet.comments.length > 0 ? (
                    snippet.comments.map((comment) => (
                        // FIX: Use the correct property names from the Query Service
                        <li key={comment.id}>{comment.content}</li>
                    ))
                ) : (
                    <li className='text-gray-500 list-none italic'>No comments yet.</li>
                )}
            </ul>
            <form onSubmit={addComment} className='mt-2 flex items-center gap-2'>
                <input
                    type='text'
                    value={text}
                    onChange={(e) => setText(e.target.value)}
                    placeholder='Add a comment...'
                    className='border rounded p-1 flex-grow'
                />
                <button type='submit' className='w-fit bg-amber-900 text-amber-50 px-4 py-1 rounded cursor-pointer'>
                    Add
                </button>
            </form>
        </div>
    );
};

export default CreateComment;
```

`client/src/components/CreateSnippet.jsx`

```javascript
// client/src/components/CreateSnippet.jsx

import React, { useState, useEffect, useMemo } from 'react';
import axios from 'axios';
import CreateComment from './CreateComment'; 

const CreateSnippet = () => {
    const [title, setTitle] = useState('');
    const [code, setCode] = useState('');
    const [snippets, setSnippets] = useState({});

    // This function will fetch the aggregated data from the Query Service
    const fetchSnippets = async () => {
        try {
            // CRITICAL FIX: Fetch from the Query Service on port 8002
            const res = await axios.get('http://localhost:8002/snippets');
            setSnippets(res.data);
        } catch (error) {
            console.error("Error fetching snippets from Query Service:", error);
        }
    };

    // Fetch snippets when the component first loads using useEffect
    useEffect(() => {
        fetchSnippets();
    }, []); // Empty dependency array ensures this runs only once on mount

    // Function to handle the creation of a new snippet
    // This still posts to the Snippet Service, which is correct.
    const createSnippet = async (e) => {
        e.preventDefault();
        try {
            const res = await axios.post('http://localhost:8000/api/v1/snippet', { title, code });
            alert(res.data.message || "Snippet created successfully!");

            // Clear the form fields after successful submission
            setTitle('');
            setCode('');
            
            // NOTE: We don't need to call fetchSnippets() here anymore.
            // In a fully event-driven UI, we would listen for an event to update state.
            // For now, a small delay and a re-fetch is a simple way to see the update.
            setTimeout(() => {
                fetchSnippets();
            }, 500); // Wait 500ms for the event to be processed by the query service

        } catch (error) {
            console.error("Error creating snippet:", error);
            alert("Failed to create snippet. See console for details.");
        }
    };

    // OPTIMIZATION: Use useMemo to prevent creating a new array on every render.
    const renderedSnippets = useMemo(() => Object.values(snippets), [snippets]);

    return (
        <div className='mt-10'>
            {/* Form to create a new snippet */}
            <div className='p-4 bg-amber-50 rounded-lg shadow-md mb-8'>
                <form onSubmit={createSnippet} className='flex flex-col space-y-4'>
                    <input
                        type='text'
                        value={title}
                        onChange={(e) => setTitle(e.target.value)}
                        placeholder='Title'
                        className='border rounded px-2 py-1 w-full md:w-1/2'
                        required
                    />
                    <textarea
                        placeholder='Write a code snippet...'
                        value={code}
                        onChange={(e) => setCode(e.target.value)}
                        className='border rounded px-2 py-1'
                        rows={5}
                        required
                    />
                    <button type='submit' className='w-fit bg-amber-900 text-amber-50 px-6 py-3 rounded cursor-pointer'>
                        Add Snippet
                    </button>
                </form>
            </div>

            {/* Displaying the list of existing snippets */}
            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
                {
                    renderedSnippets.map((snippet) => (
                        <div key={snippet.id} className='border rounded-lg p-4 bg-white shadow-sm flex flex-col'>
                            <h2 className='text-lg font-semibold text-left'>{snippet.title}</h2>
                            <pre className='bg-gray-100 text-left p-2 rounded mt-2 flex-grow overflow-auto'>{snippet.code}</pre>
                            
                            <div className='mt-4'>
                                {/* FIX: Pass down the refresh handler */}
                                <CreateComment 
                                    snippet={snippet}
                                    onCommentCreated={() => setTimeout(fetchSnippets, 500)}
                                /> 
                            </div>
                        </div>
                    ))
                }
            </div>
        </div>
    );
};

export default CreateSnippet;
```

`client/src/components/Navbar.jsx`

```javascript
import React from 'react'

const Navbar = () => {
  return (
    <div className='flex item-center justify-between' >
        <h1 className='font-bold text-2xl'>Code Snippet</h1>
        <button>Logout</button>
    </div>
  )
}

export default Navbar
```

`client/src/index.css`

```css
@import "tailwindcss";

```

`client/src/main.jsx`

```javascript
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

```

`client/vite.config.js`

```javascript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(),tailwindcss(),
],
})

```

`comments/controller/comment.js`

```javascript
// comments/controller/comment.js

import { randomBytes } from 'crypto';
import { commentsDB } from '../database/index.js';
import axios from 'axios';

// FIX: Make the function async
export const createComment = async (req, res) => {
    const commentId = randomBytes(4).toString("hex");
    const { text } = req.body;
    const snippetId = req.params.id;

    if (!text) {
        return res.status(400).json({ success: false, message: "Comment text is required." });
    }

    const comments = commentsDB[snippetId] || [];
    comments.push({ commentId, text });
    commentsDB[snippetId] = comments;

    try {
        // FIX: Await the event publication
        await axios.post("http://localhost:8005/events", {
            type: "CommentCreated",
            data: {
                id: commentId,
                content: text,
                snippetId,
            }
        });
    } catch (err) {
        console.error("Failed to publish CommentCreated event:", err.message);
    }

    return res.status(201).json({
        success: true,
        message: "Comment created successfully",
        comment: { commentId, text }
    });
};

export const getCommentBySnippetId = (req, res) => {
    const snippetId = req.params.id;

    // FIX: Change the key from 'commentsDB' to 'comments' to match the frontend
    return res.status(200).json({
        success: true,
        comments: commentsDB[snippetId] || []
    });
};
```

`comments/database/index.js`

```javascript
export const commentsDB =  {};
    // This function is a placeholder for the comments database logic.
    // You can implement your database logic here, such as connecting to a database,
    // defining schemas, or any other necessary operations.

```

`comments/index.js`

```javascript
import express from 'express';
import commentRouter from './routes/comment.js';
import cors from 'cors';



const app = express();
const PORT = 8001;

app.use(express.json());
// Middleware to parse URL-encoded bodies (for form submissions)
app.use(express.urlencoded({ extended: true }));

// Enable CORS for the frontend application
app.use(cors({
  origin: 'http://localhost:5173', // Adjust this to your frontend's URL
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  credentials: true, // Allow credentials if needed
}));
"http://localhost:${PORT}/api/v1/snippet/:id/comment";

app.post("/events", (req, res) => {
  console.log("Event received:", req.body.type);
  return res.status(200).json({});
});

app.use("/api/v1/snippet", commentRouter);



app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
```

`comments/routes/comment.js`

```javascript
import express from 'express';
import { createComment, getCommentBySnippetId } from '../controller/comment.js';

const router = express.Router();

router.route("/:id/comment").post(createComment);
router.route("/:id/comment").get(getCommentBySnippetId);

export default router;

```

`message_broker/index.js`

```javascript
import express from 'express';
import axios from 'axios';


const app = express();
const PORT = 8005;

app.use(express.json());
// Middleware to parse URL-encoded bodies (for form submissions)    
app.use(express.urlencoded({ extended: true }));


app.post("/events", (req, res) => {
    const events = req.body;

    axios.post("http://localhost:8000/events",events);//snippet service
    axios.post("http://localhost:8001/events",events);//comment service
    axios.post("http://localhost:8002/events",events);//query service

    return res.status(200).json({});
}); 

app.listen(PORT, () => {
      console.log(`Message Broker is running on port ${PORT}`);
});
```

`query/index.js`

```javascript
// query/index.js

import express from "express";
import cors from "cors";

const app = express();
const PORT = 8002;

app.use(express.json());
app.use(cors()); // Simplified cors for this service

const snippets = {}; // In-memory storage

app.get("/snippets", (_, res) => {
    return res.status(200).json(snippets);
});

app.post("/events", (req, res) => {
    const { type, data } = req.body;
    console.log(`Query service received event: ${type}`);

    if (type === "SnippetCreated") {
        // FIX: Store the code as well
        const { id, title, code } = data;
        snippets[id] = { id, title, code, comments: [] };
    }

    if (type === "CommentCreated") {
        // FIX: Destructure 'content' instead of 'comment'
        const { id, content, snippetId } = data;
        const snippet = snippets[snippetId];

        // Add a safety check in case the snippet doesn't exist yet
        if (snippet) {
            // FIX: Push the correct object structure
            snippet.comments.push({ id, content });
        }
    }

    return res.status(200).json({});
});

app.listen(PORT, () => {
    console.log(`Query service is running on port ${PORT}`);
});
```

`snippet/controller/snippet.js`

```javascript
// snippet/controller/snippet.js

import { snippets } from "../database/index.js";
import { randomBytes } from "crypto";
import axios from "axios";

// FIX: Make the function async
export const createSnippet = async (req, res) => {
    const id = randomBytes(4).toString("hex");
    const { title, code } = req.body;

    if (!title || !code) {
        return res.status(400).json({ success: false, message: "Title and code are required." });
    }
    
    snippets[id] = { id, title, code };

    try {
        // FIX: Await the event publication
        await axios.post("http://localhost:8005/events", {
            type: "SnippetCreated",
            data: {
                id,
                title,
                code // Also send the code to the query service
            }
        });
    } catch (err) {
        // This will print the entire error object, which is much more informative
        console.error("Failed to publish SnippetCreated event:", err); 
        // Decide if you want to fail the whole request or just log the error
        // For now, we'll log it and continue.
    }

    return res.status(201).json({
        success: true,
        message: "Snippet created successfully",
        snippet: snippets[id]
    });
};

export const getSnippet = (_, res) => {
    return res.status(200).json(snippets);
};
```

`snippet/database/index.js`

```javascript
// snippet/database/index.js

// FIX: Change this from a function to an object literal
export const snippets = {};
```

`snippet/index.js`

```javascript
import express from 'express';
import snippetRouter from './routes/snippet.js';
import cors from 'cors';

const app = express();
const PORT = 8000;

app.use(express.json());
// Middleware to parse URL-encoded bodies (for form submissions)
app.use(express.urlencoded({ extended: true }));

app.use(cors({
  origin: 'http://localhost:5173', // Adjust this to your frontend's URL
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  credentials: true, // Allow credentials if needed
}));

app.post("/events", (req, res) => {
  console.log("Event received:", req.body.type);
  return res.status(200).json({});
});  

app.use("/api/v1/snippet", snippetRouter);

"http://localhost:${PORT}/api/v1/snippet";


app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
```

`snippet/routes/snippet.js`

```javascript
import express from 'express';
import { createSnippet, getSnippet } from '../controller/snippet.js';

const router = express.Router();

router.route("/").post(createSnippet);
router.route("/").get(getSnippet);

export default router;

```

